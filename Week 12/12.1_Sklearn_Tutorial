{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"12.1_Sklearn_Tutorial","provenance":[],"collapsed_sections":["lBLAEyaws7wX","uyFt1u-3tEG_","rolj1gmOt_hy","vjsRd3gcmhNr","cqppHk03oDTX","o2enS3X_wO9M"],"toc_visible":true,"authorship_tag":"ABX9TyPOefjtGLUf2UuegCfPHyea"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"BSkO0zaTkYtl"},"source":["# Sklearn Tutorial"]},{"cell_type":"markdown","metadata":{"id":"oFVPrERRkaZe"},"source":["Scikit-learn is probably the most useful library for machine learning in Python. The sklearn library contains a lot of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction. Today we will go over few important use cases of sklearn"]},{"cell_type":"markdown","metadata":{"id":"pJi03gP2N3FK"},"source":["Before we dive in, let’s firstly get aligned on two terms:\n","- **Transformer**: A transformer refers to an object with fit() and transform() method that cleans, reduces, expands or generates features. Simply put, transformers help you transform your data towards a desired format for a machine learning model. OneHotEncoder and MinMaxScaler are examples of transformers.\n","- **Estimator**: An estimator refers to a machine learning model. It is an object with fit() and predict() method. We will use estimator and model interchangeably throughout this post. Here are some example estimators."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"TLJWFRRUQsmU","executionInfo":{"status":"ok","timestamp":1622549277358,"user_tz":-420,"elapsed":1295,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"87ca3d5f-d1ab-4a98-e6be-38d756aeacfe"},"source":["import numpy as np\n","import pandas as pd\n","from seaborn import load_dataset\n","\n","# Import modules for feature engineering and modelling\n","from sklearn.model_selection import train_test_split\n","# from sklearn.base import BaseEstimator, TransformerMixin\n","\n","\n","# Load dataset\n","df = load_dataset('tips').drop(columns=['tip', 'sex']).sample(n=5, random_state=42)\n","\n","# Add missing values\n","df.iloc[[1, 2, 4], [2, 4]] = np.nan\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>total_bill</th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>24</th>\n","      <td>19.82</td>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8.77</td>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>24.55</td>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>25.89</td>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>13.00</td>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     total_bill smoker  day    time  size\n","24        19.82     No  Sat  Dinner   2.0\n","6          8.77     No  NaN  Dinner   NaN\n","153       24.55     No  NaN  Dinner   NaN\n","211       25.89    Yes  Sat  Dinner   4.0\n","198       13.00    Yes  NaN   Lunch   NaN"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"pny-1Qu_QTeJ"},"source":["# Transformer (Preprocessing)"]},{"cell_type":"markdown","metadata":{"id":"BXDwt-b6lcIG"},"source":["A transformer refers to an object with **fit()** and **transform()** method that cleans, reduces, expands or generates features. Simply put, transformers help you transform your data towards a desired format for a machine learning model. OneHotEncoder and MinMaxScaler are examples of transformers."]},{"cell_type":"markdown","metadata":{"id":"iIayWbVJObeo"},"source":["Let’s assume we wanted to use only categorical features such as `smoker`, `day` and `time` columns to predict total_bill. We will drop `size` column and partition the data first"]},{"cell_type":"code","metadata":{"id":"edoklm33TKDH"},"source":["# Partition data\n","X_train, X_test, y_train, y_test = train_test_split(df.drop(columns=['total_bill', 'size']), \n","                                                    df['total_bill'], \n","                                                    test_size=.2, \n","                                                    random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":171},"id":"6ysx7EzvTKeI","executionInfo":{"status":"ok","timestamp":1622550323083,"user_tz":-420,"elapsed":266,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"7aeeabfd-bb33-4690-d4bc-e8a48d970b75"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":79},"id":"BICBmlhfTzeQ","executionInfo":{"status":"ok","timestamp":1622550324403,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"7e12a1c9-3831-48c1-98f5-6a9f3d5d8524"},"source":["X_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time\n","6     No  NaN  Dinner"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"ZfWo6_jZTWYL"},"source":["## Deal with missing values (both numerical features and categorical features)"]},{"cell_type":"markdown","metadata":{"id":"1waLhhXKTXX8"},"source":["For filling up missing values with common strategies, sklearn provides a SimpleImputer. \n","\n","Documentation: https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html\n","\n","The four main strategies are mean, most_frequent, median and constant (if you use constant, don’t forget to set the fill_value parameter)"]},{"cell_type":"code","metadata":{"id":"Ji-ODO1sT8m2"},"source":["from sklearn.impute import SimpleImputer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"ezCD5JdgT_Ke","executionInfo":{"status":"ok","timestamp":1622550325282,"user_tz":-420,"elapsed":3,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"23186cdb-b76c-490d-fa85-dd860a92ae02"},"source":["# simple example\n","X = pd.DataFrame(\n","    np.array([5,7,8, np.NaN, np.NaN, np.NaN, -5,\n","              0,25,999,1,-1, np.NaN, 0, np.NaN])\\\n","              .reshape((5,3)))\n","X.columns = ['f1', 'f2', 'f3']\n","X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>f1</th>\n","      <th>f2</th>\n","      <th>f3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.0</td>\n","      <td>7.0</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-5.0</td>\n","      <td>0.0</td>\n","      <td>25.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>999.0</td>\n","      <td>1.0</td>\n","      <td>-1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      f1   f2    f3\n","0    5.0  7.0   8.0\n","1    NaN  NaN   NaN\n","2   -5.0  0.0  25.0\n","3  999.0  1.0  -1.0\n","4    NaN  0.0   NaN"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BSvGE5TnUNDg","executionInfo":{"status":"ok","timestamp":1622550327121,"user_tz":-420,"elapsed":4,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"19a4048e-7b90-4a5f-b498-0f0ad3ec2955"},"source":["imp = SimpleImputer(missing_values=np.nan, strategy='mean')\n","imp.fit(X)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SimpleImputer(add_indicator=False, copy=True, fill_value=None,\n","              missing_values=nan, strategy='mean', verbose=0)"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"kzvFxGzrVERK"},"source":["When you do fit, the transformer will \"prepare\" any variable needed for the transformation, in this case it calculates mean of each column"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dEnORILEUfF7","executionInfo":{"status":"ok","timestamp":1622550328015,"user_tz":-420,"elapsed":1,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"62f5220c-0390-493e-eb36-05c5dc41e2c8"},"source":["imp.statistics_ "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([333.        ,   2.        ,  10.66666667])"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"ZypEFMnHrj4m","executionInfo":{"status":"ok","timestamp":1622550328866,"user_tz":-420,"elapsed":3,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"dfb28d0b-218e-4f06-882b-3d79d5e73d32"},"source":["X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>f1</th>\n","      <th>f2</th>\n","      <th>f3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.0</td>\n","      <td>7.0</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-5.0</td>\n","      <td>0.0</td>\n","      <td>25.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>999.0</td>\n","      <td>1.0</td>\n","      <td>-1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      f1   f2    f3\n","0    5.0  7.0   8.0\n","1    NaN  NaN   NaN\n","2   -5.0  0.0  25.0\n","3  999.0  1.0  -1.0\n","4    NaN  0.0   NaN"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"AFK2ZthpVY60"},"source":["Now you can start the transformation on some dataset. In this case we will transform on the very dataset we just fit on."]},{"cell_type":"code","metadata":{"id":"SZtFJf01U6oj"},"source":["X_transformed = imp.transform(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n0vkeFscU9HC","executionInfo":{"status":"ok","timestamp":1622550330256,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"80ba558c-613a-480d-cfcb-ef78539724e0"},"source":["X_transformed"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  5.        ,   7.        ,   8.        ],\n","       [333.        ,   2.        ,  10.66666667],\n","       [ -5.        ,   0.        ,  25.        ],\n","       [999.        ,   1.        ,  -1.        ],\n","       [333.        ,   0.        ,  10.66666667]])"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"mi0WkhBTWYHm"},"source":["Or you can transform on another dataset (Must have same number of columns)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sVezTPjmVp9k","executionInfo":{"status":"ok","timestamp":1622550332100,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"5f38fbcb-f80b-4b20-dd85-6d96da5fc8ed"},"source":["X2 =  np.array([-1.0, np.NaN,0,np.NaN,5,np.NaN]).reshape((2,3))\n","X2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-1., nan,  0.],\n","       [nan,  5., nan]])"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"sPvyFmv1WQqE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622550332385,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"7581cc9b-689e-4cf9-d1d8-4061ef6400d7"},"source":["X_transformed2 = imp.transform(X2)\n","X_transformed2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ -1.        ,   2.        ,   0.        ],\n","       [333.        ,   5.        ,  10.66666667]])"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"hBwZxdAOHTkG"},"source":["**Question**: what would be stored in X_transformed2?\n","\n","A. `[[ -1,0,0],[0, 5, 0]]`\n","\n","B. `[[ -1,5,0],[333, 5, 10]]`\n","\n","C. `[[ -1,2,0],[333, 5, 10.66666667]]`"]},{"cell_type":"markdown","metadata":{"id":"z_5FYKRmVRBC"},"source":["If you want to do transform on the very dataset you just fit, you can combine fit and transform together: `fit_transform`"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"owz1QfLwWrOP","executionInfo":{"status":"ok","timestamp":1622536044774,"user_tz":-420,"elapsed":4,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"54c4c6a3-e4ff-495d-d533-5b3a7945b00e"},"source":["X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>f1</th>\n","      <th>f2</th>\n","      <th>f3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.0</td>\n","      <td>7.0</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-5.0</td>\n","      <td>0.0</td>\n","      <td>25.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>999.0</td>\n","      <td>1.0</td>\n","      <td>-1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      f1   f2    f3\n","0    5.0  7.0   8.0\n","1    NaN  NaN   NaN\n","2   -5.0  0.0  25.0\n","3  999.0  1.0  -1.0\n","4    NaN  0.0   NaN"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"giA20dxiWqxd","executionInfo":{"status":"ok","timestamp":1622536045727,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"3aca2337-fd7b-4de3-8485-3d6d51f7da1e"},"source":["imp = SimpleImputer(missing_values=np.nan, strategy='mean')\n","X_transformed = imp.fit_transform(X) # imp.fit(X) then imp.transform(X)\n","X_transformed"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  5.        ,   7.        ,   8.        ],\n","       [333.        ,   2.        ,  10.66666667],\n","       [ -5.        ,   0.        ,  25.        ],\n","       [999.        ,   1.        ,  -1.        ],\n","       [333.        ,   0.        ,  10.66666667]])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1ay0f_ftLaR","executionInfo":{"status":"ok","timestamp":1622536046766,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"efa924b1-1f02-4651-b33b-9a5aa9261e41"},"source":["X2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-1., nan,  0.],\n","       [nan,  5., nan]])"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JbUH1jR7tHZS","executionInfo":{"status":"ok","timestamp":1622536047354,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"735f7ba8-cb29-407a-a4a4-85acb0c6f07c"},"source":["imp.transform(X2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ -1.        ,   2.        ,   0.        ],\n","       [333.        ,   5.        ,  10.66666667]])"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"8leIEXf_WxFK"},"source":["Go back to our restaurant dataset, we can also impute missing values of categorical features"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"3m3-IObsXHlD","executionInfo":{"status":"ok","timestamp":1622536048422,"user_tz":-420,"elapsed":3,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"63eb4327-d6b9-45f1-ca81-189e1bdf919c"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"SbnJ0YIxW4fk"},"source":["imputer = SimpleImputer(missing_values=np.nan, strategy='constant', fill_value='missing')\n","X_train_imputed = imputer.fit_transform(X_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PfNISW_mXERk","executionInfo":{"status":"ok","timestamp":1622536052449,"user_tz":-420,"elapsed":1383,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"68e915a8-05e1-4090-b6df-48cca1119ad7"},"source":["X_train_imputed"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([['Yes', 'missing', 'Lunch'],\n","       ['No', 'missing', 'Dinner'],\n","       ['No', 'Sat', 'Dinner'],\n","       ['Yes', 'Sat', 'Dinner']], dtype=object)"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"kS9JZ-TotmZB","executionInfo":{"status":"ok","timestamp":1622536052450,"user_tz":-420,"elapsed":5,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"021fa056-8696-4593-c4fc-323764474261"},"source":["X_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time\n","6     No  NaN  Dinner"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tz_aFGoZtj-v","executionInfo":{"status":"ok","timestamp":1622536052451,"user_tz":-420,"elapsed":5,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"f3860eec-86eb-4ac8-cf4e-19b4493c4fcb"},"source":["imputer.transform(X_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([['No', 'missing', 'Dinner']], dtype=object)"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"T7Eq4hfrue3W","executionInfo":{"status":"ok","timestamp":1622536053083,"user_tz":-420,"elapsed":5,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"82482690-5c71-4bcc-e30d-ae4e210da311"},"source":["X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>f1</th>\n","      <th>f2</th>\n","      <th>f3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.0</td>\n","      <td>7.0</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-5.0</td>\n","      <td>0.0</td>\n","      <td>25.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>999.0</td>\n","      <td>1.0</td>\n","      <td>-1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      f1   f2    f3\n","0    5.0  7.0   8.0\n","1    NaN  NaN   NaN\n","2   -5.0  0.0  25.0\n","3  999.0  1.0  -1.0\n","4    NaN  0.0   NaN"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"qrXuAdpiuaCr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622536053871,"user_tz":-420,"elapsed":3,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"a71ebfb6-a64b-4bd9-d6e6-a349ff91e021"},"source":["# split first (train/validation)\n","imputer.fit(X_train)\n","\n","# train data: impute the entire train data\n","\n","# unseen new raw data (missing values): impute with the mean from train data\n","\n","# Grocery store\n","# train: May (imputing with mean => training)\n","# test (validation set): June (imputing missings using May's mean => predict)\n","\n","\n","# Final model: train on May and June (imputing using mean of May and June)\n","# deploy the model on July: (raw data): impute with May and June mean"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SimpleImputer(add_indicator=False, copy=True, fill_value='missing',\n","              missing_values=nan, strategy='constant', verbose=0)"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"lBLAEyaws7wX"},"source":["## Scaling/Standardizing (Normalization for numerical features)"]},{"cell_type":"markdown","metadata":{"id":"uyFt1u-3tEG_"},"source":["### MinMaxScaler\n","\n","Documentation: https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html\n","\n","Transform features by scaling each feature to a given range."]},{"cell_type":"markdown","metadata":{"id":"xLjnfef2tsHN"},"source":["What's happening behind the scene\n","```python\n","X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\n","X_scaled = X_std * (max - min) + min\n","```"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JCG_SpTDtNmM","executionInfo":{"status":"ok","timestamp":1622549579741,"user_tz":-420,"elapsed":272,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"4c808f97-3c05-40d6-f9f7-6858965f9bab"},"source":["from sklearn.preprocessing import MinMaxScaler\n","\n","data = np.array([[-1, 2], [-0.5, 6], [0, 10], [1, 18]])\n","print(data)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[-1.   2. ]\n"," [-0.5  6. ]\n"," [ 0.  10. ]\n"," [ 1.  18. ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x-KUa7rwtnX5","executionInfo":{"status":"ok","timestamp":1622549629833,"user_tz":-420,"elapsed":269,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"f359eff6-67e6-4329-c92c-050c9ef534ac"},"source":["scaler = MinMaxScaler()\n","scaler.fit(data)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MinMaxScaler(copy=True, feature_range=(0, 1))"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TTTineGtuPJR","executionInfo":{"status":"ok","timestamp":1622549672286,"user_tz":-420,"elapsed":264,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"f20718e4-00bc-4301-ba97-377b2690c48f"},"source":["scaler.data_max_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1., 18.])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AwMnAqteuS0I","executionInfo":{"status":"ok","timestamp":1622549685647,"user_tz":-420,"elapsed":290,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"aefb12ba-f8d4-4b31-af9d-caab5bba7dbc"},"source":["scaler.data_min_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1.,  2.])"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h-tP6BWztYF6","executionInfo":{"status":"ok","timestamp":1622549697781,"user_tz":-420,"elapsed":262,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"56da52aa-aa08-4d18-9b19-47d5fbbc023f"},"source":["print(scaler.transform(data))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.   0.  ]\n"," [0.25 0.25]\n"," [0.5  0.5 ]\n"," [1.   1.  ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RalcnV2Ht-C2"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rolj1gmOt_hy"},"source":["### StandardScaler\n","\n","Documentation: https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html\n","\n","Standardize features by removing the mean and scaling to unit variance\n","\n","The standard score of a sample x is calculated as:\n","\n","z = (x - u) / s"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xQqpYXdGuexo","executionInfo":{"status":"ok","timestamp":1622549765220,"user_tz":-420,"elapsed":298,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"b767513b-874e-445d-924b-b38db82940a2"},"source":["from sklearn.preprocessing import StandardScaler\n","\n","data = np.array([[0, 0], [-1, 0], [1, 3], [1, 1]])\n","print(data)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[ 0  0]\n"," [-1  0]\n"," [ 1  3]\n"," [ 1  1]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DSRA0M0vulyl"},"source":["scaler = StandardScaler()\n","scaler.fit(data);"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D7kWh43zupSQ","executionInfo":{"status":"ok","timestamp":1622549790234,"user_tz":-420,"elapsed":270,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"b7744a29-89a5-4356-9ce3-c637ca9ac83f"},"source":["scaler.mean_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.25, 1.  ])"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"muhjd-FqnXlh","executionInfo":{"status":"ok","timestamp":1622549791086,"user_tz":-420,"elapsed":3,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"ff255537-7c1e-4243-f5f4-eee691e7fe00"},"source":["scaler.var_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.6875, 1.5   ])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HQ7Ey9C5ne5V","executionInfo":{"status":"ok","timestamp":1622536070369,"user_tz":-420,"elapsed":309,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"dcbdbb5b-9484-490f-9116-2349dc44761d"},"source":["data"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0,  0],\n","       [-1,  0],\n","       [ 1,  3],\n","       [ 1,  1]])"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"03PwWa2rojHy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622549807260,"user_tz":-420,"elapsed":259,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"79ea5945-7c32-4a56-bf02-3137e15a350f"},"source":["# (data - scaler.mean_) / np.sqrt(scaler.var_)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.30151134, -0.81649658],\n","       [-1.50755672, -0.81649658],\n","       [ 0.90453403,  1.63299316],\n","       [ 0.90453403,  0.        ]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zc6-RDKdu2GV","executionInfo":{"status":"ok","timestamp":1622549796965,"user_tz":-420,"elapsed":266,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"1c0d1db2-5842-425f-fd1f-72e149cb26cf"},"source":["scaler.transform(data)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.30151134, -0.81649658],\n","       [-1.50755672, -0.81649658],\n","       [ 0.90453403,  1.63299316],\n","       [ 0.90453403,  0.        ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"wOWj2DLoXKiq"},"source":["## One hot encoder"]},{"cell_type":"markdown","metadata":{"id":"byCUpA2BXtA4"},"source":["Encode categorical features as a one-hot numeric array.\n","\n","Documentation: https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html"]},{"cell_type":"code","metadata":{"id":"W7s91MO8X7yP"},"source":["from sklearn.preprocessing import OneHotEncoder"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4S65-WyZbPlV","executionInfo":{"status":"ok","timestamp":1622550347731,"user_tz":-420,"elapsed":280,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"3f5dd987-98a8-4e18-818a-a610a2ca1090"},"source":["X_train_imputed"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([['Yes', 'missing', 'Lunch'],\n","       ['No', 'missing', 'Dinner'],\n","       ['No', 'Sat', 'Dinner'],\n","       ['Yes', 'Sat', 'Dinner']], dtype=object)"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"Odd78An4Xv-o"},"source":["encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n","X_train_encoded = encoder.fit_transform(X_train_imputed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YH_oKthjYygM","executionInfo":{"status":"ok","timestamp":1622551067456,"user_tz":-420,"elapsed":331,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"6985fa10-6371-418b-bb2b-c351996318f5"},"source":["X_train_encoded"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1., 0., 1., 0., 1.],\n","       [1., 0., 0., 1., 1., 0.],\n","       [1., 0., 1., 0., 1., 0.],\n","       [0., 1., 1., 0., 1., 0.]])"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v_jSrr2mYq5E","executionInfo":{"status":"ok","timestamp":1622550515447,"user_tz":-420,"elapsed":264,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"e6ff6859-60cc-4ed7-ee7f-519f45746aab"},"source":["encoder.get_feature_names(X_train.columns)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['smoker_No', 'smoker_Yes', 'day_Sat', 'day_missing', 'time_Dinner',\n","       'time_Lunch'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"p2gTbEluqP6a"},"source":["# pd.DataFrame(X_train_encoded, columns=encoder.get_feature_names(X_train.columns))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":497},"id":"rSSZwF6MX9DE","executionInfo":{"status":"ok","timestamp":1622550517469,"user_tz":-420,"elapsed":5,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"d25726f7-63b4-4046-ff76-4d436b91db76"},"source":["print(\"******************** Training data ********************\")\n","display(X_train)\n","display(pd.DataFrame(X_train_imputed, columns=X_train.columns))\n","display(pd.DataFrame(X_train_encoded, columns=encoder.get_feature_names(X_train.columns)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["******************** Training data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Yes</td>\n","      <td>missing</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>No</td>\n","      <td>missing</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker      day    time\n","0    Yes  missing   Lunch\n","1     No  missing  Dinner\n","2     No      Sat  Dinner\n","3    Yes      Sat  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch\n","0        0.0         1.0      0.0          1.0          0.0         1.0\n","1        1.0         0.0      0.0          1.0          1.0         0.0\n","2        1.0         0.0      1.0          0.0          1.0         0.0\n","3        0.0         1.0      1.0          0.0          1.0         0.0"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"SICkNYdKsFMk"},"source":["## Ordinal Encoder\n","\n","Encode categorical features as an integer array. Very useful to deal with ordinal categorical feature. Also it can be a trick to transform binary categorical features (where OneHotEncoder will result in extra columns)"]},{"cell_type":"code","metadata":{"id":"0BI7HXJlsMmY"},"source":["from sklearn.preprocessing import OrdinalEncoder\n","# ord_encoder = OrdinalEncoder()\n","ord_encoder = OrdinalEncoder(categories=[['Yes','No'],['Breakfast','Lunch','Dinner']])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2s5bFIa3vb1B","executionInfo":{"status":"ok","timestamp":1622551683738,"user_tz":-420,"elapsed":4,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"36b39500-943d-4ec4-8b15-df6305a69d45"},"source":["X_train_imputed2 = X_train_imputed[:,[0,2]]\n","X_train_imputed2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([['Yes', 'Lunch'],\n","       ['No', 'Dinner'],\n","       ['No', 'Dinner'],\n","       ['Yes', 'Dinner']], dtype=object)"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"Jd4FDaLJsSIC"},"source":["X_train_encoded2 = ord_encoder.fit_transform(X_train_imputed2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FX6bTOWSuOga","executionInfo":{"status":"ok","timestamp":1622551685325,"user_tz":-420,"elapsed":3,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"3da6b615-c1fb-40f5-d5d6-c1f4f82e3e85"},"source":["X_train_encoded2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0.],\n","       [1., 1.],\n","       [1., 1.],\n","       [0., 1.]])"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I0EHwfzIuU-3","executionInfo":{"status":"ok","timestamp":1622551686464,"user_tz":-420,"elapsed":2,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"7333a8a9-1a5a-49cd-89c2-9e08933f768e"},"source":["ord_encoder.categories_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[array(['Yes', 'No'], dtype=object), array(['Lunch', 'Dinner'], dtype=object)]"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":497},"id":"y-6rJC-6tzz2","executionInfo":{"status":"ok","timestamp":1622551693403,"user_tz":-420,"elapsed":452,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"a0d2bc0d-aea6-4699-d8b4-a1eb4eb75ee8"},"source":["print(\"******************** Training data ********************\")\n","display(X_train)\n","display(pd.DataFrame(X_train_imputed2, columns=X_train.columns[[0,2]]))\n","display(pd.DataFrame(X_train_encoded2, columns=X_train.columns[[0,2]]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["******************** Training data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Yes</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>No</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>No</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Yes</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker    time\n","0    Yes   Lunch\n","1     No  Dinner\n","2     No  Dinner\n","3    Yes  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker  time\n","0     0.0   0.0\n","1     1.0   1.0\n","2     1.0   1.0\n","3     0.0   1.0"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9HF3BX9-twHH","executionInfo":{"status":"ok","timestamp":1622537328168,"user_tz":-420,"elapsed":320,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"4fd76956-0266-450f-945c-ad4d9cf077f5"},"source":["ord_encoder.categories_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[array(['Yes', 'No'], dtype=object), array(['Lunch', 'Dinner'], dtype=object)]"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"markdown","metadata":{"id":"TV-tiDcrwwhN"},"source":["For this dataset, however, we will stick with OneHotEncoder"]},{"cell_type":"markdown","metadata":{"id":"LBOX6JuaY0jU"},"source":["## Transforming test data\n","\n","It's best practice to perform data preprocessing's preparation on your train data, and apply those transformation on test data (to simulate real life scenario where we are not going to access future data beforehand)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":171},"id":"Q9NdgW3ior0W","executionInfo":{"status":"ok","timestamp":1622552004468,"user_tz":-420,"elapsed":275,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"7b3ee3f4-4789-42a9-c9a5-975b724d9584"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":79},"id":"6xDvZq3po5Ua","executionInfo":{"status":"ok","timestamp":1622552059504,"user_tz":-420,"elapsed":296,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"47451576-7b7b-4164-d7bd-aa2fa62b3c90"},"source":["X_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time\n","6     No  NaN  Dinner"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"IvehM_KAas7L"},"source":["# Transform test data\n","X_test_imputed = imputer.transform(X_test) # missing values\n","X_test_encoded = encoder.transform(X_test_imputed) # one hot encoding"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":221},"id":"nByoozCJZTwK","executionInfo":{"status":"ok","timestamp":1622552100293,"user_tz":-420,"elapsed":270,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"75650dec-89cf-4bfc-d35e-69cc703f0832"},"source":["# Inspect test data before and after\n","print(\"******************** Test data ********************\")\n","display(X_test)\n","display(pd.DataFrame(X_test_imputed, columns=X_train.columns))\n","display(pd.DataFrame(X_test_encoded, columns=encoder.get_feature_names(X_train.columns)))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["******************** Test data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time\n","6     No  NaN  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>No</td>\n","      <td>missing</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker      day    time\n","0     No  missing  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch\n","0        1.0         0.0      0.0          1.0          1.0         0.0"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"sQ9Ow2pKZiqI"},"source":["## Pipeline"]},{"cell_type":"markdown","metadata":{"id":"IFTcsF-5aQna"},"source":["To recap, we \n","- See raw data first\n","- Put data in SimpleImputer for imputation of missing values\n","- Put the imputed result in OneHotEncoder. \n","\n","Our problems: We manually feed output from previous step to the next step as an input and have multiple interim outputs. We also had to repeat each step on the test data. As the number of steps increase, it will become more tedious to maintain and more prone to error"]},{"cell_type":"markdown","metadata":{"id":"Sl-nDIoYbCK3"},"source":["**Solution**: Pipelines\n","\n","When using Pipeline, each step passes its output to the next step as an input. Therefore, we don’t have to manually keep track of different versions of the data. This approach gives us the exact same final output but with more elegant code."]},{"cell_type":"code","metadata":{"id":"v_eTSbARcwwN"},"source":["from sklearn.pipeline import Pipeline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CiFKBKCibDGp"},"source":["pipe = Pipeline([('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n","                 ('encoder', OneHotEncoder(handle_unknown='ignore', sparse=False))])\n","pipe.fit(X_train); # preparation (no transformation yet)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FxR_doaMnVNi","executionInfo":{"status":"ok","timestamp":1622538434038,"user_tz":-420,"elapsed":561,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"bd194b76-60e9-44eb-9464-f50d2452ebf5"},"source":["pipe['imputer']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SimpleImputer(add_indicator=False, copy=True, fill_value='missing',\n","              missing_values=nan, strategy='constant', verbose=0)"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kMDBzcyknWtW","executionInfo":{"status":"ok","timestamp":1622538434038,"user_tz":-420,"elapsed":3,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"b5dbcacd-4deb-406e-9fdb-cd2bd2f06a35"},"source":["pipe['encoder']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,\n","              handle_unknown='ignore', sparse=False)"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"nOk9-SejyuZe"},"source":["# X_train_transformed = pipe.fit_transform(X_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bZQttbK_bHi7"},"source":["X_train_transformed = pipe.transform(X_train)\n","X_test_transformed = pipe.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"id":"0FWLtdTVbZR2","executionInfo":{"status":"ok","timestamp":1622538439998,"user_tz":-420,"elapsed":6,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"b5742bdc-4fba-4c43-fd05-eaaef26f69cc"},"source":["print(\"******************** Training data ********************\")\n","display(X_train)\n","display(pd.DataFrame(X_train_transformed, columns=pipe['encoder'].get_feature_names(X_train.columns)))\n","\n","# Inspect test data before and after\n","print(\"******************** Test data ********************\")\n","display(X_test)\n","display(pd.DataFrame(X_test_transformed, columns=pipe['encoder'].get_feature_names(X_train.columns)))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["******************** Training data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch\n","0        0.0         1.0      0.0          1.0          0.0         1.0\n","1        1.0         0.0      0.0          1.0          1.0         0.0\n","2        1.0         0.0      1.0          0.0          1.0         0.0\n","3        0.0         1.0      1.0          0.0          1.0         0.0"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["******************** Test data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time\n","6     No  NaN  Dinner"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch\n","0        1.0         0.0      0.0          1.0          1.0         0.0"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"4QRjdKvlbtIv"},"source":["# Estimator (Machine Learning Model)"]},{"cell_type":"markdown","metadata":{"id":"TZAUPTGtkuiz"},"source":["An estimator refers to a machine learning model. It is an object with **fit()** (training part) and **predict()** method. We will use estimator and model interchangeably throughout this post. Here is an example of Linear Regression, an sklearn estimator"]},{"cell_type":"markdown","metadata":{"id":"hc4GNLgwmoid"},"source":["Documentation for LinearRegression: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html"]},{"cell_type":"code","metadata":{"id":"yhouyAqOmGPi"},"source":["from sklearn.linear_model import LinearRegression"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKdXbxAvzghD","executionInfo":{"status":"ok","timestamp":1622538506390,"user_tz":-420,"elapsed":313,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"2c4a5b96-1da2-4cda-c99c-4e90f9a1a623"},"source":["X_train_transformed"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1., 0., 1., 0., 1.],\n","       [1., 0., 0., 1., 1., 0.],\n","       [1., 0., 1., 0., 1., 0.],\n","       [0., 1., 1., 0., 1., 0.]])"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s1u5hbokltgc","executionInfo":{"status":"ok","timestamp":1622538509333,"user_tz":-420,"elapsed":313,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"de0165a4-ea9b-4b70-85e7-c0a445b83efb"},"source":["# Fit model to training data\n","model = LinearRegression()\n","model.fit(X_train_transformed, y_train)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-rNZLtK-mH_J","executionInfo":{"status":"ok","timestamp":1622538513049,"user_tz":-420,"elapsed":1249,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"c3e4b61c-9c22-49ec-fb29-fdf7180c2ff6"},"source":["print(model.coef_) # weights\n","print(model.intercept_) # bias"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[-3.035  3.035 -2.365  2.365  8.81  -8.81 ]\n","16.409999999999997\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xphHD8RymEG1","executionInfo":{"status":"ok","timestamp":1622538521577,"user_tz":-420,"elapsed":305,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"2d9e038c-6cf6-494c-c93b-e178dc071c4b"},"source":["# Predict training data\n","y_train_pred = model.predict(X_train_transformed)\n","print(f\"Predictions on training data: {y_train_pred}\")\n","\n","\n","# Predict test data\n","y_test_pred = model.predict(X_test_transformed)\n","print(f\"Predictions on test data: {y_test_pred}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predictions on training data: [13.   24.55 19.82 25.89]\n","Predictions on test data: [24.55]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IPYMzgZR0GHE"},"source":["# fit_predict? => NO"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vjsRd3gcmhNr"},"source":["# Pipeline combining Transformer and Estimator"]},{"cell_type":"markdown","metadata":{"id":"D8HrDQuinDBy"},"source":["Sklearn allows you to combine Transformer and Estimator using Pipeline. That means you can combine data preprocessing and machine learning model to work directly with raw data"]},{"cell_type":"code","metadata":{"id":"5710ceG6nN9x","colab":{"base_uri":"https://localhost:8080/","height":172},"executionInfo":{"status":"ok","timestamp":1620196936579,"user_tz":-420,"elapsed":3504,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"4761058f-5830-449d-d219-550924f814a3"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"2okcADU40489"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yDjNchCCmjFb"},"source":["pipe = Pipeline([('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n","                 ('encoder', OneHotEncoder(handle_unknown='ignore', sparse=False)), \n","                 ('model', LinearRegression())])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vmfpnx6f2l6G","executionInfo":{"status":"ok","timestamp":1620196936580,"user_tz":-420,"elapsed":3479,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"067ef91c-a569-45c2-efcf-75560a0c9c6e"},"source":["pipe.fit(X_train, y_train)\n","# imputer.fit_transform() -> encoder.fit_transform() -> model.fit()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(memory=None,\n","         steps=[('imputer',\n","                 SimpleImputer(add_indicator=False, copy=True,\n","                               fill_value='missing', missing_values=nan,\n","                               strategy='constant', verbose=0)),\n","                ('encoder',\n","                 OneHotEncoder(categories='auto', drop=None,\n","                               dtype=<class 'numpy.float64'>,\n","                               handle_unknown='ignore', sparse=False)),\n","                ('model',\n","                 LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n","                                  normalize=False))],\n","         verbose=False)"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TJKZXvHwnSkA","executionInfo":{"status":"ok","timestamp":1620196936580,"user_tz":-420,"elapsed":3467,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"3dd9af7e-8e4d-47cc-90c6-37ce5ac09649"},"source":["pipe['model']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nidGZcaonlNi","executionInfo":{"status":"ok","timestamp":1620196936581,"user_tz":-420,"elapsed":3448,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"ed4d8b9b-4233-42f1-d32d-9233cd0b45b7"},"source":["print(pipe['model'].coef_) # weights\n","print(pipe['model'].intercept_) # bias"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[-3.035  3.035 -2.365  2.365  8.81  -8.81 ]\n","16.409999999999997\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":172},"id":"8_Rw2XUs14fH","executionInfo":{"status":"ok","timestamp":1620196936582,"user_tz":-420,"elapsed":3413,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"43dc125f-6de0-4f02-de08-8d84c5f264dc"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time\n","198    Yes  NaN   Lunch\n","153     No  NaN  Dinner\n","24      No  Sat  Dinner\n","211    Yes  Sat  Dinner"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":79},"id":"iBfmMcfS16K7","executionInfo":{"status":"ok","timestamp":1620196936584,"user_tz":-420,"elapsed":3392,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"f82de17d-0a1d-45aa-9567-b5f687d6de52"},"source":["X_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time\n","6     No  NaN  Dinner"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qhrUjOF8nRoE","executionInfo":{"status":"ok","timestamp":1620196937863,"user_tz":-420,"elapsed":4646,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"8af428c9-3013-4307-f8a1-6060468814e2"},"source":["# Predict training data\n","\n","y_train_pred = pipe.predict(X_train)\n","# imputer.transform() -> encoder.transform() -> model.predict()\n","\n","print(f\"Predictions on training data: {y_train_pred}\")\n","\n","# Predict test data\n","\n","y_test_pred = pipe.predict(X_test)\n","# imputer.transform() -> encoder.transform() -> model.predict()\n","\n","print(f\"Predictions on test data: {y_test_pred}\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predictions on training data: [13.   24.55 19.82 25.89]\n","Predictions on test data: [24.55]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rac1mdAcnt00"},"source":["Calling a single line: pipe.predict(X) on raw data will do the transformations then return a prediction. It’s also easy to see the sequence of steps too."]},{"cell_type":"markdown","metadata":{"id":"H8oHANpOnypU"},"source":["Let's summarize:"]},{"cell_type":"markdown","metadata":{"id":"BZKbbNZcn7-h"},"source":["![](https://miro.medium.com/max/682/1*ONryJuHGGUZ6PUmYTMiFxQ.png)"]},{"cell_type":"markdown","metadata":{"id":"cqppHk03oDTX"},"source":["# Column Transformer"]},{"cell_type":"markdown","metadata":{"id":"7N8eZzWloEof"},"source":["Biggest problem with our transformers is that **it imputed and encoded all columns the same way**. That's why we only work with categorical columns so far. \n","\n","We often need to apply different sets of tranformers to different groups of columns. For instance, we would want to apply OneHotEncoder to only categorical columns but not to numerical columns. This is where ColumnTransformer comes in."]},{"cell_type":"code","metadata":{"id":"00BaL5ooodj6"},"source":["# redefine our data and train/test set\n","X_train, X_test, y_train, y_test = train_test_split(df.drop(columns=['total_bill']), \n","                                                    df['total_bill'], \n","                                                    test_size=.2, \n","                                                    random_state=42)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":172},"id":"QguPPjtzoiUL","executionInfo":{"status":"ok","timestamp":1620197124814,"user_tz":-420,"elapsed":622,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"ec892c34-cf9c-407a-9849-abad90edcd02"},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time  size\n","198    Yes  NaN   Lunch   NaN\n","153     No  NaN  Dinner   NaN\n","24      No  Sat  Dinner   2.0\n","211    Yes  Sat  Dinner   4.0"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":79},"id":"4RgA6R4LoqB4","executionInfo":{"status":"ok","timestamp":1620197126069,"user_tz":-420,"elapsed":530,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"0abb0cba-1f73-4e79-c897-3a970645d1ec"},"source":["X_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time  size\n","6     No  NaN  Dinner   NaN"]},"metadata":{"tags":[]},"execution_count":82}]},{"cell_type":"markdown","metadata":{"id":"sk2SXF1uo3So"},"source":["Useful function to select numerical vs categorical features: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.select_dtypes.html"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PoBPLf3KRxnx","executionInfo":{"status":"ok","timestamp":1620197200084,"user_tz":-420,"elapsed":881,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"7648f625-3dd4-4422-df0f-e37a0c05669a"},"source":["X_train.select_dtypes('category').columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['smoker', 'day', 'time'], dtype='object')"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UGbo_wssoh1p","executionInfo":{"status":"ok","timestamp":1620197165824,"user_tz":-420,"elapsed":605,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"aa9c84f2-edca-413a-f5b5-fe37ada9aaf2"},"source":["\n","# Define categorical columns\n","categorical = list(X_train.select_dtypes('category').columns)\n","print(f\"Categorical columns are: {categorical}\")\n","\n","# Define numerical columns\n","numerical = list(X_train.select_dtypes('number').columns)\n","print(f\"Numerical columns are: {numerical}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Categorical columns are: ['smoker', 'day', 'time']\n","Numerical columns are: ['size']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2otYbGmSucL-"},"source":["numerical"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Qx7Jh-fMvQUE"},"source":["## For 1 group of data"]},{"cell_type":"markdown","metadata":{"id":"Z6b2vsDtpS_p"},"source":["The previous section’s code will no longer work now because we have multiple data types. Let’s see an example where we use ColumnTransformer together with Pipeline to **do the same transformations as before** in the presence of multiple data types."]},{"cell_type":"code","metadata":{"id":"OTSGg2KcplPn"},"source":["from sklearn.compose import ColumnTransformer"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NeV3rsQbsFJC"},"source":["We will define cat_pipe (previously called pipe in section 1) and pass it to the ColumnTransformer to transform the categorical columns and specified remainder='passthrough' to keep the remaining column as is.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eVRvyzu4SKvN","executionInfo":{"status":"ok","timestamp":1620197292111,"user_tz":-420,"elapsed":657,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"e0a98f90-22bb-4365-e375-6b4cb6e95c45"},"source":["categorical"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['smoker', 'day', 'time']"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qaQROEESRRo","executionInfo":{"status":"ok","timestamp":1620197319822,"user_tz":-420,"elapsed":1077,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"7f568d8f-f2ca-454e-b321-2b4fcde84f60"},"source":["X_train.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['smoker', 'day', 'time', 'size'], dtype='object')"]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"code","metadata":{"id":"gLjRHG6zpXZC"},"source":["cat_pipe = Pipeline([('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n","                     ('encoder', OneHotEncoder(handle_unknown='ignore', sparse=False))])\n","\n","tfm = ColumnTransformer(transformers=[('cat', cat_pipe, categorical)], \n","                                 remainder='passthrough')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OF_SIwnepgEk","executionInfo":{"status":"ok","timestamp":1620197612537,"user_tz":-420,"elapsed":905,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"dcbc4524-1dab-4198-aed8-7d836e06020d"},"source":["tfm.fit(X_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0.3,\n","                  transformer_weights=None,\n","                  transformers=[('cat',\n","                                 Pipeline(memory=None,\n","                                          steps=[('imputer',\n","                                                  SimpleImputer(add_indicator=False,\n","                                                                copy=True,\n","                                                                fill_value='missing',\n","                                                                missing_values=nan,\n","                                                                strategy='constant',\n","                                                                verbose=0)),\n","                                                 ('encoder',\n","                                                  OneHotEncoder(categories='auto',\n","                                                                drop=None,\n","                                                                dtype=<class 'numpy.float64'>,\n","                                                                handle_unknown='ignore',\n","                                                                sparse=False))],\n","                                          verbose=False),\n","                                 ['smoker', 'day', 'time'])],\n","                  verbose=False)"]},"metadata":{"tags":[]},"execution_count":93}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KV0K0YwrrQJt","executionInfo":{"status":"ok","timestamp":1620196937871,"user_tz":-420,"elapsed":4547,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"6287384e-eaa0-481c-d543-88b2171da982"},"source":["tfm.named_transformers_['cat']['imputer']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SimpleImputer(add_indicator=False, copy=True, fill_value='missing',\n","              missing_values=nan, strategy='constant', verbose=0)"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cZprKrkfrf74","executionInfo":{"status":"ok","timestamp":1620196937871,"user_tz":-420,"elapsed":4531,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"8fc965b7-c670-474a-b6aa-b2a6a51ecde8"},"source":["tfm.named_transformers_['cat']['encoder']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,\n","              handle_unknown='ignore', sparse=False)"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"lvIa_bMjrtBD"},"source":["X_train_transformed = tfm.transform(X_train)\n","X_test_transformed = tfm.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"L-1hPW9qritX","executionInfo":{"status":"ok","timestamp":1620197626423,"user_tz":-420,"elapsed":718,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"34bff6fc-cab3-495f-c92d-a1c036ebd6b4"},"source":["# Prepare column names\n","cat_columns = tfm.named_transformers_['cat']['encoder'].get_feature_names(categorical)\n","columns = np.append(cat_columns, numerical)\n","\n","# Inspect training data before and after\n","print(\"******************** Training data ********************\")\n","display(X_train)\n","display(pd.DataFrame(X_train_transformed, columns=columns))\n","\n","# Inspect test data before and after\n","print(\"******************** Test data ********************\")\n","display(X_test)\n","display(pd.DataFrame(X_test_transformed, columns=columns))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["******************** Training data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time  size\n","198    Yes  NaN   Lunch   NaN\n","153     No  NaN  Dinner   NaN\n","24      No  Sat  Dinner   2.0\n","211    Yes  Sat  Dinner   4.0"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch  size\n","0        0.0         1.0      0.0          1.0          0.0         1.0   NaN\n","1        1.0         0.0      0.0          1.0          1.0         0.0   NaN\n","2        1.0         0.0      1.0          0.0          1.0         0.0   2.0\n","3        0.0         1.0      1.0          0.0          1.0         0.0   4.0"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["******************** Test data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time  size\n","6     No  NaN  Dinner   NaN"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch  size\n","0        1.0         0.0      0.0          1.0          1.0         0.0   NaN"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"SdVGCqNIvTyV"},"source":["## For multiple groups of data"]},{"cell_type":"markdown","metadata":{"id":"y3bExSSnsA3y"},"source":["We haven't done any transformation on the numerical data yet. Let’s impute missing values with mean and scale it between 0 and 1"]},{"cell_type":"code","metadata":{"id":"LPGRhaR8srGD"},"source":["# Define categorical pipeline\n","cat_pipe = Pipeline([('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n","                     ('encoder', OneHotEncoder(handle_unknown='ignore', sparse=False))])\n","\n","# Define numerical pipeline\n","num_pipe = Pipeline([('imputer', SimpleImputer(strategy='mean')),\n","                     ('scaler', MinMaxScaler())])\n","\n","# Fit column transformer to training data\n","tfm = ColumnTransformer(transformers=[('cat', cat_pipe, categorical),\n","                                      ('num', num_pipe, numerical)],\n","                        remainder='passthrough'\n","                        )"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mioN8QZgvoX3"},"source":["1st: manually transform those binary features ('Yes and No to 0 and 1') => passthrough\n","\n","\n","2nd: dont' transform those features, then include them in categorical list => duplicate columns\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dKV5XoveUbVU","executionInfo":{"status":"ok","timestamp":1620197941290,"user_tz":-420,"elapsed":489,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"c2e9ac8d-ba40-4209-dc75-b4b35f03676c"},"source":["categorical"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['smoker', 'day', 'time']"]},"metadata":{"tags":[]},"execution_count":103}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ycPO3BMaUcZx","executionInfo":{"status":"ok","timestamp":1620197942520,"user_tz":-420,"elapsed":758,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"ef70bb61-e511-4b7c-c8ba-dfd60b1a29e5"},"source":["numerical"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['size']"]},"metadata":{"tags":[]},"execution_count":104}]},{"cell_type":"code","metadata":{"id":"ijn2HJMxvZC5"},"source":["tfm.fit(X_train);"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iKzO9Hr_voqI"},"source":["X_train_transformed = tfm.transform(X_train)\n","X_test_transformed = tfm.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"GXSaWxukvj5l","executionInfo":{"status":"ok","timestamp":1620197951901,"user_tz":-420,"elapsed":880,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"5c1ed065-3208-494f-ae2b-38ea89b641a8"},"source":["# Prepare column names\n","cat_columns = tfm.named_transformers_['cat']['encoder'].get_feature_names(categorical)\n","columns = np.append(cat_columns, numerical)\n","\n","# Inspect training data before and after\n","print(\"******************** Training data ********************\")\n","display(X_train)\n","display(pd.DataFrame(X_train_transformed, columns=columns))\n","\n","# Inspect test data before and after\n","print(\"******************** Test data ********************\")\n","display(X_test)\n","display(pd.DataFrame(X_test_transformed, columns=columns))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["******************** Training data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>198</th>\n","      <td>Yes</td>\n","      <td>NaN</td>\n","      <td>Lunch</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>No</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>Yes</td>\n","      <td>Sat</td>\n","      <td>Dinner</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    smoker  day    time  size\n","198    Yes  NaN   Lunch   NaN\n","153     No  NaN  Dinner   NaN\n","24      No  Sat  Dinner   2.0\n","211    Yes  Sat  Dinner   4.0"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch  size\n","0        0.0         1.0      0.0          1.0          0.0         1.0   0.5\n","1        1.0         0.0      0.0          1.0          1.0         0.0   0.5\n","2        1.0         0.0      1.0          0.0          1.0         0.0   0.0\n","3        0.0         1.0      1.0          0.0          1.0         0.0   1.0"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["******************** Test data ********************\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker</th>\n","      <th>day</th>\n","      <th>time</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>No</td>\n","      <td>NaN</td>\n","      <td>Dinner</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  smoker  day    time  size\n","6     No  NaN  Dinner   NaN"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>smoker_No</th>\n","      <th>smoker_Yes</th>\n","      <th>day_Sat</th>\n","      <th>day_missing</th>\n","      <th>time_Dinner</th>\n","      <th>time_Lunch</th>\n","      <th>size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   smoker_No  smoker_Yes  day_Sat  day_missing  time_Dinner  time_Lunch  size\n","0        1.0         0.0      0.0          1.0          1.0         0.0   0.5"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"_MiNZxOWvyK7"},"source":["Let's recap:\n","\n","![](https://miro.medium.com/max/591/1*BNwN3cmbLLoU9CQoJgFSKQ.png)"]},{"cell_type":"markdown","metadata":{"id":"o2enS3X_wO9M"},"source":["# Pipeline combining Column Transformer and Estimator"]},{"cell_type":"markdown","metadata":{"id":"460yeLmGwapU"},"source":["Let’s now add a model to our example:"]},{"cell_type":"code","metadata":{"id":"hI-bs6ZHXKk0"},"source":["# tfm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j0LVF51Zwdjs"},"source":["final_pipe = Pipeline(steps=[('preprocessor', tfm),\n","                       ('model', LinearRegression())])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ak49w0omwlQb"},"source":["final_pipe.fit(X_train, y_train);"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WIIbmDvBwntX","executionInfo":{"status":"ok","timestamp":1620198695512,"user_tz":-420,"elapsed":657,"user":{"displayName":"Quan Tran","photoUrl":"","userId":"11078860236930939203"}},"outputId":"f36b3b7f-d576-411b-9c16-d7639856ced9"},"source":["# Predict training data\n","y_train_pred = final_pipe.predict(X_train)\n","print(f\"Predictions on training data: {y_train_pred}\")\n","\n","# Predict test data\n","y_test_pred = final_pipe.predict(X_test)\n","print(f\"Predictions on test data: {y_test_pred}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predictions on training data: [13.   24.55 19.82 25.89]\n","Predictions on test data: [24.55]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ATiS55F9wn_M"},"source":["![](https://miro.medium.com/max/748/1*jkjsxby0QGgERSnRKJlA0w.png)"]}]}